name: CI

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true


jobs:
  test:
    name: Test
    strategy:
      matrix:
        # service containers are only supported on ubuntu currently
        os:
          - ubuntu-latest
        py:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11-dev'

      fail-fast: false
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    env:
      MYSQL_ROOT_PASSWORD: rootpw

    services:
      mysql57:
        image: "mysql:5.7"
        ports:
          - 3306:3306
        volumes:
          - "/tmp/run-mysql57/:/socket-mount/"
        options: '--name=mysql57'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      mysql80:
        image: "mysql:8.0"
        ports:
          - 3307:3306
        volumes:
          - "/tmp/run-mysql80/:/socket-mount/"
        options: '--name=mysql80'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      mariadb102:
        image: "mariadb:10.2"
        ports:
          - 3308:3306
        volumes:
          - "/tmp/run-mariadb102/:/socket-mount/"
        options: '--name=mariadb102'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      mariadb103:
        image: "mariadb:10.3"
        ports:
          - 3309:3306
        volumes:
          - "/tmp/run-mariadb103/:/socket-mount/"
        options: '--name=mariadb103'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      mariadb104:
        image: "mariadb:10.4"
        ports:
          - 3310:3306
        volumes:
          - "/tmp/run-mariadb104/:/socket-mount/"
        options: '--name=mariadb104'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      mariadb105:
        image: "mariadb:10.5"
        ports:
          - 3311:3306
        volumes:
          - "/tmp/run-mariadb105/:/socket-mount/"
        options: '--name=mariadb105'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      mariadb106:
        image: "mariadb:10.6"
        ports:
          - 3312:3306
        volumes:
          - "/tmp/run-mariadb106/:/socket-mount/"
        options: '--name=mariadb106'
        env:
          MYSQL_ROOT_PASSWORD: rootpw
      mariadb107:
        image: "mariadb:10.7"
        ports:
          - 3313:3306
        volumes:
          - "/tmp/run-mariadb107/:/socket-mount/"
        options: '--name=mariadb107'
        env:
          MYSQL_ROOT_PASSWORD: rootpw

    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.0

    - name: Setup Python ${{ matrix.py }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py }}

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache

    - name: Cache PyPI
      uses: actions/cache@v2.1.7
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.py }}
        path: ${{ steps.pip-cache.outputs.dir }}

    - name: Update pip, wheel, setuptools, build, twine, codecov
      run: |
        python -m pip install -U pip wheel setuptools build twine codecov

    - name: Install dependencies
      run: |
        python -m pip install --upgrade --requirement requirements-dev.txt

    - name: Install aiomysql
      run: |
        python -m pip install .

    - name: Check rst
      run: |
        python setup.py check --restructuredtext

    # this ensures our database is ready. typically by the time the preparations have completed its first start logic.
    # unfortunately we need this hacky workaround as GitHub Actions service containers can't reference data from our repo.
    - name: Prepare mysql
      run: |
        declare -A DATABASES=(
            [mysql57]=3306
            [mysql80]=3307
            [mariadb102]=3308
            [mariadb103]=3309
            [mariadb104]=3310
            [mariadb105]=3311
            [mariadb106]=3312
            [mariadb107]=3313
        )

        PYTEST_CONNECTION_ARGS=""

        for db in "${!DATABASES[@]}"
        do
            # add connection argument for pytest
            PYTEST_CONNECTION_ARGS="$PYTEST_CONNECTION_ARGS --mysql-unix-socket unix-$db=/tmp/run-$db/mysql.sock --mysql-address tcp-$db=127.0.0.1:${DATABASES[$db]}"

            # ensure server is started up
            while :
            do
                mysql -h127.0.0.1 "-P${DATABASES[$db]}" -uroot "-p$MYSQL_ROOT_PASSWORD" -e 'select version()' && break
                sleep 1
            done
        done

        echo "PYTEST_CONNECTION_ARGS=$PYTEST_CONNECTION_ARGS" >> "$GITHUB_ENV"

        for db in "${!DATABASES[@]}"
        do
            # inject tls configuration
            docker container stop "$db"
            docker container cp "${{ github.workspace }}/tests/ssl_resources/ssl" "$db:/etc/mysql/ssl"
            docker container cp "${{ github.workspace }}/tests/ssl_resources/tls.cnf" "$db:/etc/mysql/conf.d/aiomysql-tls.cnf"

            # use custom socket path
            # we need to ensure that the socket path is writable for the user running the DB process in the container
            sudo chmod 0777 "/tmp/run-$db"

            # mysql 5.7 container overrides the socket path in /etc/mysql/mysql.conf.d/mysqld.cnf
            if [ "$db" = "mysql57" ]
            then
              docker container cp "${{ github.workspace }}/tests/ssl_resources/socket.cnf" "$db:/etc/mysql/mysql.conf.d/zz-aiomysql-socket.cnf"
            else
              docker container cp "${{ github.workspace }}/tests/ssl_resources/socket.cnf" "$db:/etc/mysql/conf.d/aiomysql-socket.cnf"
            fi

            docker container start "$db"
        done

        for db in "${!DATABASES[@]}"
        do
            # ensure server is started up
            while :
            do
                mysql -h127.0.0.1 "-P${DATABASES[$db]}" -uroot "-p$MYSQL_ROOT_PASSWORD" -e 'select version()' && break
                sleep 1
            done

            mysql -h127.0.0.1 "-P${DATABASES[$db]}" -uroot "-p$MYSQL_ROOT_PASSWORD" -e "SET GLOBAL local_infile=on"
        done

    - name: Run tests
      run: |
        # timeout ensures a more or less clean stop by sending a KeyboardInterrupt which will still provide useful logs
        timeout --preserve-status --signal=INT --verbose 30m \
          pytest --color=yes --capture=no --verbosity 2 --cov-report term --cov-report xml --cov aiomysql --cov tests ./tests $PYTEST_CONNECTION_ARGS
      env:
        PYTHONUNBUFFERED: 1
      timeout-minutes: 31

    - name: Upload coverage
      uses: codecov/codecov-action@v2.1.0
      with:
        file: ./coverage.xml
        flags: "${{ matrix.os }}_${{ matrix.py }}"
        fail_ci_if_error: true
        verbose: true
